-- 1. JOIN
-- 2. UNION
-- 3. subquery
-- 
-- 1-1. SQL 에서 JOIN 은 여러 테이블에서 데이터를 가져와 결합하는 기능임
-- RDBS 에서는 데이터의 중복을 피하고 쉽게 관리하기 위해 데이터를 여러 곳에 나누어 보관함
-- 	ex) 어떤 주문을 담당한 직원을 확인하고 싶은데, 주문 아이디 orders 테이블에 있고, 직원 이름은 staff 테이블에 있다면 어떤 방식으로 쿼리를 입력해야하는 지 작성
-- 		
-- 	이상에서 이루어지는 데이터 분산을 '데이터 정규화 (Data Normalization)' 이라고 하며 DB 에서 중복을 최소화하고 데이터의 일관성을 유지함.
-- 	
-- 	1) JOIN
-- 		지금까지는 테이블 하나의 데이터를 필터링 등을 다루는 연습을 함
-- 		지금부터는 둘 이상의 테이블을 함께 다루면서 해당 키워드를 통해 합쳐서 보는 연습 진행
-- 		
-- 		실습 데이터를 기준으로
-- 		ex) 국가별로 주문 건수를 알아보고 싶다면 -> users 와 orders 가 필요함
-- 			즉, 하나의 테이블만으로는 정확한 정보 출력이 불가능함
-- 		
-- 		일반적으로 JOIN 의 개념은 수학적 집합의 개념과 비슷하게 생각하면 됨.
-- 		두 개의 데이터 집합을 하나로 결합하는 기능을 지님
-- 		
-- 		즉, 기본적으로는 '서로 다른 두 테이블 간의 공통 부분인 키를 활용' 하여 테이블을 합침
		

-- users 와 orders 를 하나로 결합하여 출력 (단 주문 정보가 있는 회원의 정보만 출력)

SELECT *
	FROM users u INNER JOIN orders o ON u.id = o.user_id
	;

-- 이상의 SQL 문에 대한 해석
-- 기존에 from 다음에는 테이블 명 하나만 작성되었지만, 이제는 JOIN 연산을 위한 추가 문법이 적용됨
-- 회원 정보와 주문 정보를 하나로 결합하기 위해 users 와 orders 를 INNER JOIN (추후 설명)으로 묶은 후 '후속 조건' 으로 "주문 정보가 있는 회원의 정보" 만 출력하기 위해
-- u.id = o.user_id 를 사용함

-- users 의 PK 인 id 는 회원의 id 에 해당함
-- orders 의 PK 인 id 는 주문 id에 해당하고 2번째 컬럼의 user_id 는
-- PK 는 아니지만 JOIN 을 수행할 때 users 와 합치는 조건이 됨.